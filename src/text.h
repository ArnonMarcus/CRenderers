#include "core.h"

u8 Font[768] = {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x3c, 0x3c, 0x18,
        0x18, 0x00, 0x18, 0x00, 0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6c, 0x6c, 0xfe, 0x6c, 0xfe, 0x6c, 0x6c, 0x00, 0x18, 0x3e, 0x60, 0x3c,
        0x06, 0x7c, 0x18, 0x00, 0x00, 0xc6, 0xcc, 0x18, 0x30, 0x66, 0xc6, 0x00,
        0x38, 0x6c, 0x38, 0x76, 0xdc, 0xcc, 0x76, 0x00, 0x18, 0x18, 0x30, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x00,
        0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x18, 0x30, 0x00, 0x00, 0x66, 0x3c, 0xff,
        0x3c, 0x66, 0x00, 0x00, 0x00, 0x18, 0x18, 0x7e, 0x18, 0x18, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x7e,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
        0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x80, 0x00, 0x38, 0x6c, 0xc6, 0xd6,
        0xc6, 0x6c, 0x38, 0x00, 0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7e, 0x00,
        0x7c, 0xc6, 0x06, 0x1c, 0x30, 0x66, 0xfe, 0x00, 0x7c, 0xc6, 0x06, 0x3c,
        0x06, 0xc6, 0x7c, 0x00, 0x1c, 0x3c, 0x6c, 0xcc, 0xfe, 0x0c, 0x1e, 0x00,
        0xfe, 0xc0, 0xc0, 0xfc, 0x06, 0xc6, 0x7c, 0x00, 0x38, 0x60, 0xc0, 0xfc,
        0xc6, 0xc6, 0x7c, 0x00, 0xfe, 0xc6, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x00,
        0x7c, 0xc6, 0xc6, 0x7c, 0xc6, 0xc6, 0x7c, 0x00, 0x7c, 0xc6, 0xc6, 0x7e,
        0x06, 0x0c, 0x78, 0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00,
        0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30, 0x06, 0x0c, 0x18, 0x30,
        0x18, 0x0c, 0x06, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x7e, 0x00, 0x00,
        0x60, 0x30, 0x18, 0x0c, 0x18, 0x30, 0x60, 0x00, 0x7c, 0xc6, 0x0c, 0x18,
        0x18, 0x00, 0x18, 0x00, 0x7c, 0xc6, 0xde, 0xde, 0xde, 0xc0, 0x78, 0x00,
        0x38, 0x6c, 0xc6, 0xfe, 0xc6, 0xc6, 0xc6, 0x00, 0xfc, 0x66, 0x66, 0x7c,
        0x66, 0x66, 0xfc, 0x00, 0x3c, 0x66, 0xc0, 0xc0, 0xc0, 0x66, 0x3c, 0x00,
        0xf8, 0x6c, 0x66, 0x66, 0x66, 0x6c, 0xf8, 0x00, 0xfe, 0x62, 0x68, 0x78,
        0x68, 0x62, 0xfe, 0x00, 0xfe, 0x62, 0x68, 0x78, 0x68, 0x60, 0xf0, 0x00,
        0x3c, 0x66, 0xc0, 0xc0, 0xce, 0x66, 0x3a, 0x00, 0xc6, 0xc6, 0xc6, 0xfe,
        0xc6, 0xc6, 0xc6, 0x00, 0x3c, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x00,
        0x1e, 0x0c, 0x0c, 0x0c, 0xcc, 0xcc, 0x78, 0x00, 0xe6, 0x66, 0x6c, 0x78,
        0x6c, 0x66, 0xe6, 0x00, 0xf0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xfe, 0x00,
        0xc6, 0xee, 0xfe, 0xfe, 0xd6, 0xc6, 0xc6, 0x00, 0xc6, 0xe6, 0xf6, 0xde,
        0xce, 0xc6, 0xc6, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
        0xfc, 0x66, 0x66, 0x7c, 0x60, 0x60, 0xf0, 0x00, 0x7c, 0xc6, 0xc6, 0xc6,
        0xc6, 0xce, 0x7c, 0x0e, 0xfc, 0x66, 0x66, 0x7c, 0x6c, 0x66, 0xe6, 0x00,
        0x3c, 0x66, 0x30, 0x18, 0x0c, 0x66, 0x3c, 0x00, 0x7e, 0x7e, 0x5a, 0x18,
        0x18, 0x18, 0x3c, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00,
        0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00, 0xc6, 0xc6, 0xc6, 0xd6,
        0xd6, 0xfe, 0x6c, 0x00, 0xc6, 0xc6, 0x6c, 0x38, 0x6c, 0xc6, 0xc6, 0x00,
        0x66, 0x66, 0x66, 0x3c, 0x18, 0x18, 0x3c, 0x00, 0xfe, 0xc6, 0x8c, 0x18,
        0x32, 0x66, 0xfe, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c, 0x00,
        0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x02, 0x00, 0x3c, 0x0c, 0x0c, 0x0c,
        0x0c, 0x0c, 0x3c, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x30, 0x18, 0x0c, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x0c, 0x7c, 0xcc, 0x76, 0x00,
        0xe0, 0x60, 0x7c, 0x66, 0x66, 0x66, 0xdc, 0x00, 0x00, 0x00, 0x7c, 0xc6,
        0xc0, 0xc6, 0x7c, 0x00, 0x1c, 0x0c, 0x7c, 0xcc, 0xcc, 0xcc, 0x76, 0x00,
        0x00, 0x00, 0x7c, 0xc6, 0xfe, 0xc0, 0x7c, 0x00, 0x3c, 0x66, 0x60, 0xf8,
        0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0xf8,
        0xe0, 0x60, 0x6c, 0x76, 0x66, 0x66, 0xe6, 0x00, 0x18, 0x00, 0x38, 0x18,
        0x18, 0x18, 0x3c, 0x00, 0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3c,
        0xe0, 0x60, 0x66, 0x6c, 0x78, 0x6c, 0xe6, 0x00, 0x38, 0x18, 0x18, 0x18,
        0x18, 0x18, 0x3c, 0x00, 0x00, 0x00, 0xec, 0xfe, 0xd6, 0xd6, 0xd6, 0x00,
        0x00, 0x00, 0xdc, 0x66, 0x66, 0x66, 0x66, 0x00, 0x00, 0x00, 0x7c, 0xc6,
        0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0xdc, 0x66, 0x66, 0x7c, 0x60, 0xf0,
        0x00, 0x00, 0x76, 0xcc, 0xcc, 0x7c, 0x0c, 0x1e, 0x00, 0x00, 0xdc, 0x76,
        0x60, 0x60, 0xf0, 0x00, 0x00, 0x00, 0x7e, 0xc0, 0x7c, 0x06, 0xfc, 0x00,
        0x30, 0x30, 0xfc, 0x30, 0x30, 0x36, 0x1c, 0x00, 0x00, 0x00, 0xcc, 0xcc,
        0xcc, 0xcc, 0x76, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x6c, 0x38, 0x00,
        0x00, 0x00, 0xc6, 0xd6, 0xd6, 0xfe, 0x6c, 0x00, 0x00, 0x00, 0xc6, 0x6c,
        0x38, 0x6c, 0xc6, 0x00, 0x00, 0x00, 0xc6, 0xc6, 0xc6, 0x7e, 0x06, 0xfc,
        0x00, 0x00, 0x7e, 0x4c, 0x18, 0x32, 0x7e, 0x00, 0x0e, 0x18, 0x18, 0x70,
        0x18, 0x18, 0x0e, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
        0x70, 0x18, 0x18, 0x0e, 0x18, 0x18, 0x70, 0x00, 0x76, 0xdc, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x6c, 0xc6, 0xc6, 0xfe, 0x00
};


#define LINE_HEIGHT 12
#define FONT_HEIGHT 8
#define FONT_WIDTH 8
#define FONT_SIZE (FONT_WIDTH * FONT_HEIGHT)
#define FIRST_CHARACTER_CODE 32
#define LAST_CHARACTER_CODE 127

static u32 character_buffer[4 * FONT_SIZE];

int drawCharacter(u8 character, u32 text_color, u32 pixel_offset) {
    if (character < FIRST_CHARACTER_CODE ||
        character > LAST_CHARACTER_CODE)
        return 0;

    u8* byte = Font + (FONT_WIDTH * (character - FIRST_CHARACTER_CODE));
    u32* character_buffer_pixel = character_buffer;

    int i, j = 0;
    for (i = 0; i < FONT_SIZE; i++) {
        *character_buffer_pixel++ = (*byte & (0x80 >> j++)) ? text_color : 0;
        if (j > 7) {
            j = 0;
            byte++;
        }
    }

    u16 step = frame_buffer.width - FONT_WIDTH;
    character_buffer_pixel = character_buffer;
    pixel = frame_buffer.pixels + pixel_offset;

    for (j = FONT_HEIGHT; j >= 0 ; j--) {
        for (i = 0; i < FONT_WIDTH; i++) {
            int idx = j * FONT_WIDTH + i;

            /* skip background bits */
            if (character_buffer[idx])
                *pixel = character_buffer[idx];

            pixel++;
        }
        pixel += step;
    }
    return 1;
}

int drawString(const char *str, u32 text_color, int x, int y) {
    if (y < FONT_HEIGHT)
        return 0;

    int current_x = x;
    int current_y = y;

    u32 line_offset  = frame_buffer.width * LINE_HEIGHT;
    u32 pixel_offset = frame_buffer.width * y + x;

    while (*str) {
        if (*str == '\n') {
            pixel_offset += line_offset - current_x + x;
            current_x = x;
            current_y -= LINE_HEIGHT;
            if (y < FONT_HEIGHT)
                return 0;

            str++;
            if (!*str)
                break;
        }

        if (current_x < 0 ||
            current_y < 0 ||
            current_x + FONT_WIDTH > frame_buffer.width ||
            current_y + FONT_HEIGHT > frame_buffer.height)
            return 0;

        if (*str == '\t') {
            current_x += (4 - ((current_x / FONT_WIDTH) & 3)) * FONT_WIDTH;
            str++;
            continue;
        }

        drawCharacter(*str++, text_color, pixel_offset);
        current_x += FONT_WIDTH;
        pixel_offset += FONT_WIDTH;
    }

    return 0;
}



#define FW_FNT_WD 8
#define FW_FNT_HT 8
#define FW_FNT_SZ (FW_FNT_WD * FW_FNT_HT)

static int FWi_text_color = 0xff;

static int FWi_temp_img_buf[4 * FW_FNT_SZ];

void set_text_color(int c) {
    if (c < 1) {
        c = 1;
    }
    FWi_text_color = c;
}

int draw_char(unsigned char c, int x, int y, FrameBuffer* pbuf) {
    if (c < 32 || c >= 128) {
        return 0;
    }

    c -= 32;

    int i, j;
    int *dptr = (int*) FWi_temp_img_buf;
    const unsigned char *bit_ptr = Font + FW_FNT_WD * (int) c;
    int clr = (int) FWi_text_color;
    j = 0;
    for (i = 0; i < FW_FNT_SZ; i++) {
        *dptr++ = (*bit_ptr & (0x80 >> j++)) ? clr : 0;
        if (j > 7) {
            j = 0;
            bit_ptr++;
        }
    }
    dptr = (int*) pbuf->pixels + y * pbuf->width + x;
    int *sptr = (int*) FWi_temp_img_buf;
    int step = pbuf->width - FW_FNT_WD;
    /* you might need to iterate over the font height backwards if it gets rendered upside down */
    for (j = 0; j < FW_FNT_HT; j++) {
        for (i = 0; i < FW_FNT_WD; i++) {
            int idx = j * FW_FNT_WD + i;
            /* skip background bits */
            if (sptr[idx] == 0) {
                dptr++;
            } else {
                *dptr++ = sptr[idx];
            }
        }
        dptr += step;
    }
    return 1;
}

int draw_string(const char *str, int x, int y, FrameBuffer* pbuf) {
    /* uncomment this line if font is being rendered upside down */
    //	y = (pbuf->height - FW_FNT_HT - y);
    int sx = x;
    while (*str) {
        if (*str == '\n') {
            /* replace the plus in the next statement with a minus if font is being rendered upside down */
            y += 12;
            x = sx;
            str++;
            if (!*str) {
                break;
            }
        }
        if (x < 0) {
            return 0;
        }
        if (y < 0) {
            return 0;
        }
        if (x + FW_FNT_WD > pbuf->width) {
            return 0;
        }
        if (y + FW_FNT_HT > pbuf->height) {
            return 0;
        }
        if (*str == '\t') {
            x += (4 - ((x / FW_FNT_WD) & 3)) * FW_FNT_WD;
            str++;
            continue;
        }
        draw_char(*str++, x, y, pbuf);
        x += FW_FNT_WD;
    }
    return 0;
}
